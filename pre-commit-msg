#!/usr/bin/ruby
# Encoding: utf-8

message_file = ARGV[0]

current_branch = %x(git rev-parse --abbrev-ref HEAD).sub("\n","")

# repo_url = %x(git config --get remote.origin.url).sub(".git\n", '')

def check_format_rules(line_number, line)
  conventional_commit_conventions = [ 'feat(.*): ', 'fix(.*): ', 'chore(.*): ', 'install(.*): ', 'improvement(.*): ', 'ci(.*): ', 'ui(.*): ', 'style(.*): ' ]  
  conventional_commit_check = conventional_commit_conventions.map{|x| line.match(x)}.compact
  errors = []
  if conventional_commit_check.empty?
    unless line.include?('HOTFIX')
      return errors << "Error : Your commit message seems like not following conventional commit rules, please check your commit's convention"
    end
  end
  errors << "Error : Your commit message contains #{line.length} characters. Commit message should be less than 72 characters in length." if line.length > 72
  errors << "Error : Your subject contains #{line.split(':')[1].length} characters. Subject should be less than 50 characters" if line.split(':')[1].length > 50
  errors << "Error : Commit message subject should start in Capital." if line.split(':')[1].lstrip[0] == line.split(':')[1].lstrip[0].downcase
  return errors
end

def check_is_conventional(message_file)
  errors = []
  File.open(message_file, 'r').each_with_index do |line, line_number|
    errors = check_format_rules line_number, line.strip
  end
  return errors
end

def error_block(errors)
  print("\n<--------------------------✋ Invalid commit format. exiting commit---------------------->\n")
  print("\n")
  print errors.join("\n")
  print("\n")
  print("\n")  
end

def validate_commit(current_branch, message_file)
  commit_errors = check_is_conventional(message_file)
  if current_branch == "master"
    puts "✋ [PREVENT] --> Non shall commit to master!"
    exit 1
  else
    if commit_errors.empty?
      exit 0
    else
      error_block(commit_errors)
      puts 'Press y to edit and n to cancel the commit. [y/n]'    
      choice = $stdin.gets.chomp
      if %w(no n).include?(choice.downcase)
        exit 1
      elsif %w(yes y).include?(choice.downcase)
        puts "Please make your new commit :"
        edit = $stdin.gets.chomp
        File.open(message_file, 'w') do |file|
          file.write edit
        end
        validate_commit(message_file)
      else
        exit 1
      end
    end
  end
end

while true
  validate_commit(current_branch, message_file)
end
